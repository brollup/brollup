#![allow(non_camel_case_types)]

use crate::executive::opcode::op::{
    payment::op_pay::OP_PAY,
    storage::{op_sread::OP_SREAD, op_swrite::OP_SWRITE},
};

use super::op::{
    altstack::{op_fromaltstack::OP_FROMALTSTACK, op_toaltstack::OP_TOALTSTACK},
    arithmetic::{
        op_0notequal::OP_0NOTEQUAL, op_1add::OP_1ADD, op_1sub::OP_1SUB, op_2div::OP_2DIV,
        op_2mul::OP_2MUL, op_add::OP_ADD, op_addmod::OP_ADDMOD, op_booland::OP_BOOLAND,
        op_boolor::OP_BOOLOR, op_div::OP_DIV, op_greaterthan::OP_GREATERTHAN,
        op_greaterthanorequal::OP_GREATERTHANOREQUAL, op_lessthan::OP_LESSTHAN,
        op_lessthanorequal::OP_LESSTHANOREQUAL, op_lshift::OP_LSHIFT, op_max::OP_MAX,
        op_min::OP_MIN, op_mul::OP_MUL, op_mulmod::OP_MULMOD, op_not::OP_NOT,
        op_numequal::OP_NUMEQUAL, op_numequalverify::OP_NUMEQUALVERIFY,
        op_numnotequal::OP_NUMNOTEQUAL, op_rshift::OP_RSHIFT, op_sub::OP_SUB, op_within::OP_WITHIN,
    },
    bitwise::{
        op_and::OP_AND, op_equal::OP_EQUAL, op_equalverify::OP_EQUALVERIFY, op_invert::OP_INVERT,
        op_or::OP_OR, op_reverse::OP_REVERSE, op_xor::OP_XOR,
    },
    call::{op_call::OP_CALL, op_callext::OP_CALLEXT},
    callinfo::{
        op_caller::OP_CALLER, op_opsbudget::OP_OPSBUDGET, op_opscounter::OP_OPSCOUNTER,
        op_opsprice::OP_OPSPRICE, op_timestamp::OP_TIMESTAMP,
    },
    digest::{
        op_blake2bvar::OP_BLAKE2BVAR, op_blake2svar::OP_BLAKE2SVAR, op_hash160::OP_HASH160,
        op_hash256::OP_HASH256, op_ripemd160::OP_RIPEMD160, op_sha1::OP_SHA1, op_sha256::OP_SHA256,
        op_taggedhash::OP_TAGGEDHASH,
    },
    flow::{
        op_else::OP_ELSE, op_endif::OP_ENDIF, op_fail::OP_FAIL, op_if::OP_IF, op_nop::OP_NOP,
        op_notif::OP_NOTIF, op_returnall::OP_RETURNALL, op_returnerr::OP_RETURNERR,
        op_returnsome::OP_RETURNSOME, op_verify::OP_VERIFY,
    },
    memory::{op_free::OP_MFREE, op_mread::OP_MREAD, op_mwrite::OP_MWRITE},
    payment::{
        op_payablealloc::OP_PAYABLEALLOC, op_payableleft::OP_PAYABLELEFT,
        op_payablespent::OP_PAYABLESPENT,
    },
    push::{
        op_10::OP_10, op_11::OP_11, op_12::OP_12, op_13::OP_13, op_14::OP_14, op_15::OP_15,
        op_16::OP_16, op_2::OP_2, op_3::OP_3, op_4::OP_4, op_5::OP_5, op_6::OP_6, op_7::OP_7,
        op_8::OP_8, op_9::OP_9, op_false::OP_FALSE, op_pushdata::OP_PUSHDATA, op_true::OP_TRUE,
    },
    reserved::{
        op_reserved_1::OP_RESERVED_1, op_reserved_2::OP_RESERVED_2, op_reserved_3::OP_RESERVED_3,
        op_reserved_4::OP_RESERVED_4, op_reserved_5::OP_RESERVED_5,
    },
    secp::{
        op_isinfinitesecppoint::OP_ISINFINITESECPPOINT, op_iszerosecpscalar::OP_ISZEROSECPSCALAR,
        op_pushsecpgeneratorpoint::OP_PUSHSECPGENERATORPOINT, op_secppointadd::OP_SECPPOINTADD,
        op_secppointmul::OP_SECPPOINTMUL, op_secpscalaradd::OP_SECPSCALARADD,
        op_secpscalarmul::OP_SECPSCALARMUL,
    },
    signature::{
        op_checkblssig::OP_CHECKBLSSIG, op_checkblssigagg::OP_CHECKBLSSIGAGG,
        op_checkschnorrsig::OP_CHECKSCHNORRSIG, op_checkschnorrsigbip340::OP_CHECKSCHNORRSIGBIP340,
    },
    splice::{
        op_cat::OP_CAT, op_left::OP_LEFT, op_right::OP_RIGHT, op_size::OP_SIZE, op_split::OP_SPLIT,
    },
    stack::{
        op_2drop::OP_2DROP, op_2dup::OP_2DUP, op_2over::OP_2OVER, op_2rot::OP_2ROT,
        op_2swap::OP_2SWAP, op_3dup::OP_3DUP, op_depth::OP_DEPTH, op_drop::OP_DROP, op_dup::OP_DUP,
        op_ifdup::OP_IFDUP, op_nip::OP_NIP, op_over::OP_OVER, op_pick::OP_PICK, op_roll::OP_ROLL,
        op_rot::OP_ROT, op_swap::OP_SWAP, op_tuck::OP_TUCK,
    },
};
use std::fmt::{self, Display};

/// The set of opcodes that can be used in the stack.
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum Opcode {
    // Push
    OP_FALSE(OP_FALSE),
    OP_PUSHDATA(OP_PUSHDATA),
    OP_RESERVED_1(OP_RESERVED_1), //0x4e
    OP_RESERVED_2(OP_RESERVED_2), //0x4f
    OP_RESERVED_3(OP_RESERVED_3), //0x50
    OP_TRUE(OP_TRUE),
    OP_2(OP_2),
    OP_3(OP_3),
    OP_4(OP_4),
    OP_5(OP_5),
    OP_6(OP_6),
    OP_7(OP_7),
    OP_8(OP_8),
    OP_9(OP_9),
    OP_10(OP_10),
    OP_11(OP_11),
    OP_12(OP_12),
    OP_13(OP_13),
    OP_14(OP_14),
    OP_15(OP_15),
    OP_16(OP_16),
    // Flow
    OP_NOP(OP_NOP),
    OP_RETURNERR(OP_RETURNERR),
    OP_IF(OP_IF),
    OP_NOTIF(OP_NOTIF),
    OP_ELSE(OP_ELSE),
    OP_ENDIF(OP_ENDIF),
    OP_VERIFY(OP_VERIFY),
    OP_RETURNALL(OP_RETURNALL),
    OP_RETURNSOME(OP_RETURNSOME),
    OP_FAIL(OP_FAIL),
    // Alts`tack
    OP_TOALTSTACK(OP_TOALTSTACK),
    OP_FROMALTSTACK(OP_FROMALTSTACK),
    // Stack
    OP_2DROP(OP_2DROP),
    OP_2DUP(OP_2DUP),
    OP_3DUP(OP_3DUP),
    OP_2OVER(OP_2OVER),
    OP_2ROT(OP_2ROT),
    OP_2SWAP(OP_2SWAP),
    OP_IFDUP(OP_IFDUP),
    OP_DEPTH(OP_DEPTH),
    OP_DROP(OP_DROP),
    OP_DUP(OP_DUP),
    OP_NIP(OP_NIP),
    OP_OVER(OP_OVER),
    OP_PICK(OP_PICK),
    OP_ROLL(OP_ROLL),
    OP_ROT(OP_ROT),
    OP_SWAP(OP_SWAP),
    OP_TUCK(OP_TUCK),
    // Splice
    OP_CAT(OP_CAT),
    OP_SPLIT(OP_SPLIT),
    OP_LEFT(OP_LEFT),
    OP_RIGHT(OP_RIGHT),
    OP_SIZE(OP_SIZE),
    // Bitwise
    OP_INVERT(OP_INVERT),
    OP_AND(OP_AND),
    OP_OR(OP_OR),
    OP_XOR(OP_XOR),
    OP_EQUAL(OP_EQUAL),
    OP_EQUALVERIFY(OP_EQUALVERIFY),
    OP_REVERSE(OP_REVERSE),
    // Arithmetic
    OP_RESERVED_4(OP_RESERVED_4), //0x89
    OP_1ADD(OP_1ADD),
    OP_1SUB(OP_1SUB),
    OP_2MUL(OP_2MUL),
    OP_2DIV(OP_2DIV),
    OP_ADDMOD(OP_ADDMOD),
    OP_MULMOD(OP_MULMOD),
    OP_NOT(OP_NOT),
    OP_0NOTEQUAL(OP_0NOTEQUAL),
    OP_ADD(OP_ADD),
    OP_SUB(OP_SUB),
    OP_MUL(OP_MUL),
    OP_DIV(OP_DIV),
    OP_RESERVED_5(OP_RESERVED_5), //0x97
    OP_LSHIFT(OP_LSHIFT),
    OP_RSHIFT(OP_RSHIFT),
    OP_BOOLAND(OP_BOOLAND),
    OP_BOOLOR(OP_BOOLOR),
    OP_NUMEQUAL(OP_NUMEQUAL),
    OP_NUMEQUALVERIFY(OP_NUMEQUALVERIFY),
    OP_NUMNOTEQUAL(OP_NUMNOTEQUAL),
    OP_LESSTHAN(OP_LESSTHAN),
    OP_GREATERTHAN(OP_GREATERTHAN),
    OP_LESSTHANOREQUAL(OP_LESSTHANOREQUAL),
    OP_GREATERTHANOREQUAL(OP_GREATERTHANOREQUAL),
    OP_MIN(OP_MIN),
    OP_MAX(OP_MAX),
    OP_WITHIN(OP_WITHIN),
    // Hashing
    OP_RIPEMD160(OP_RIPEMD160),
    OP_SHA1(OP_SHA1),
    OP_SHA256(OP_SHA256),
    OP_HASH160(OP_HASH160),
    OP_HASH256(OP_HASH256),
    OP_TAGGEDHASH(OP_TAGGEDHASH),
    OP_BLAKE2BVAR(OP_BLAKE2BVAR),
    OP_BLAKE2SVAR(OP_BLAKE2SVAR),
    // Secp
    OP_SECPSCALARADD(OP_SECPSCALARADD),
    OP_SECPSCALARMUL(OP_SECPSCALARMUL),
    OP_SECPPOINTADD(OP_SECPPOINTADD),
    OP_SECPPOINTMUL(OP_SECPPOINTMUL),
    OP_PUSHSECPGENERATORPOINT(OP_PUSHSECPGENERATORPOINT),
    OP_ISZEROSECPSCALAR(OP_ISZEROSECPSCALAR),
    OP_ISINFINITESECPPOINT(OP_ISINFINITESECPPOINT),
    // Digital signatures
    OP_CHECKSCHNORRSIG(OP_CHECKSCHNORRSIG),
    OP_CHECKSCHNORRSIGBIP340(OP_CHECKSCHNORRSIGBIP340),
    OP_CHECKBLSSIG(OP_CHECKBLSSIG),
    OP_CHECKBLSSIGAGG(OP_CHECKBLSSIGAGG),
    // Call info
    OP_CALLER(OP_CALLER),
    OP_OPSBUDGET(OP_OPSBUDGET),
    OP_OPSCOUNTER(OP_OPSCOUNTER),
    OP_OPSPRICE(OP_OPSPRICE),
    OP_TIMESTAMP(OP_TIMESTAMP),
    // Call
    OP_CALL(OP_CALL),
    OP_CALLEXT(OP_CALLEXT),
    // Payment
    OP_PAYABLEALLOC(OP_PAYABLEALLOC),
    OP_PAYABLESPENT(OP_PAYABLESPENT),
    OP_PAYABLELEFT(OP_PAYABLELEFT),
    OP_PAY(OP_PAY),
    // Memory
    OP_MWRITE(OP_MWRITE),
    OP_MREAD(OP_MREAD),
    OP_MFREE(OP_MFREE),
    // Storage
    OP_SWRITE(OP_SWRITE),
    OP_SREAD(OP_SREAD),
}

impl Display for Opcode {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            // Data push
            Opcode::OP_FALSE(_) => write!(f, "OP_FALSE"),
            Opcode::OP_PUSHDATA(op_pushdata) => {
                write!(f, "OP_PUSHDATA 0x{}", hex::encode(&op_pushdata.0))
            }
            Opcode::OP_RESERVED_1(_) => write!(f, "OP_RESERVED_1"),
            Opcode::OP_RESERVED_2(_) => write!(f, "OP_RESERVED_2"),
            Opcode::OP_RESERVED_3(_) => write!(f, "OP_RESERVED_3"),
            Opcode::OP_TRUE(_) => write!(f, "OP_TRUE"),
            Opcode::OP_2(_) => write!(f, "OP_2"),
            Opcode::OP_3(_) => write!(f, "OP_3"),
            Opcode::OP_4(_) => write!(f, "OP_4"),
            Opcode::OP_5(_) => write!(f, "OP_5"),
            Opcode::OP_6(_) => write!(f, "OP_6"),
            Opcode::OP_7(_) => write!(f, "OP_7"),
            Opcode::OP_8(_) => write!(f, "OP_8"),
            Opcode::OP_9(_) => write!(f, "OP_9"),
            Opcode::OP_10(_) => write!(f, "OP_10"),
            Opcode::OP_11(_) => write!(f, "OP_11"),
            Opcode::OP_12(_) => write!(f, "OP_12"),
            Opcode::OP_13(_) => write!(f, "OP_13"),
            Opcode::OP_14(_) => write!(f, "OP_14"),
            Opcode::OP_15(_) => write!(f, "OP_15"),
            Opcode::OP_16(_) => write!(f, "OP_16"),
            // Flow
            Opcode::OP_NOP(_) => write!(f, "OP_NOP"),
            Opcode::OP_RETURNERR(_) => write!(f, "OP_RETURNERR"),
            Opcode::OP_IF(_) => write!(f, "OP_IF"),
            Opcode::OP_NOTIF(_) => write!(f, "OP_NOTIF"),
            Opcode::OP_ELSE(_) => write!(f, "OP_ELSE"),
            Opcode::OP_ENDIF(_) => write!(f, "OP_ENDIF"),
            Opcode::OP_VERIFY(_) => write!(f, "OP_VERIFY"),
            Opcode::OP_RETURNALL(_) => write!(f, "OP_RETURNALL"),
            Opcode::OP_RETURNSOME(_) => write!(f, "OP_RETURNSOME"),
            Opcode::OP_FAIL(_) => write!(f, "OP_FAIL"),
            // Altstack
            Opcode::OP_TOALTSTACK(_) => write!(f, "OP_TOALTSTACK"),
            Opcode::OP_FROMALTSTACK(_) => write!(f, "OP_FROMALTSTACK"),
            // Stack
            Opcode::OP_2DROP(_) => write!(f, "OP_2DROP"),
            Opcode::OP_2DUP(_) => write!(f, "OP_2DUP"),
            Opcode::OP_3DUP(_) => write!(f, "OP_3DUP"),
            Opcode::OP_2OVER(_) => write!(f, "OP_2OVER"),
            Opcode::OP_2ROT(_) => write!(f, "OP_2ROT"),
            Opcode::OP_2SWAP(_) => write!(f, "OP_2SWAP"),
            Opcode::OP_IFDUP(_) => write!(f, "OP_IFDUP"),
            Opcode::OP_DEPTH(_) => write!(f, "OP_DEPTH"),
            Opcode::OP_DROP(_) => write!(f, "OP_DROP"),
            Opcode::OP_DUP(_) => write!(f, "OP_DUP"),
            Opcode::OP_NIP(_) => write!(f, "OP_NIP"),
            Opcode::OP_OVER(_) => write!(f, "OP_OVER"),
            Opcode::OP_PICK(_) => write!(f, "OP_PICK"),
            Opcode::OP_ROLL(_) => write!(f, "OP_ROLL"),
            Opcode::OP_ROT(_) => write!(f, "OP_ROT"),
            Opcode::OP_SWAP(_) => write!(f, "OP_SWAP"),
            Opcode::OP_TUCK(_) => write!(f, "OP_TUCK"),
            // Splice
            Opcode::OP_CAT(_) => write!(f, "OP_CAT"),
            Opcode::OP_SPLIT(_) => write!(f, "OP_SPLIT"),
            Opcode::OP_LEFT(_) => write!(f, "OP_LEFT"),
            Opcode::OP_RIGHT(_) => write!(f, "OP_RIGHT"),
            Opcode::OP_SIZE(_) => write!(f, "OP_SIZE"),
            // Bitwise
            Opcode::OP_INVERT(_) => write!(f, "OP_INVERT"),
            Opcode::OP_AND(_) => write!(f, "OP_AND"),
            Opcode::OP_OR(_) => write!(f, "OP_OR"),
            Opcode::OP_XOR(_) => write!(f, "OP_XOR"),
            Opcode::OP_EQUAL(_) => write!(f, "OP_EQUAL"),
            Opcode::OP_EQUALVERIFY(_) => write!(f, "OP_EQUALVERIFY"),
            Opcode::OP_REVERSE(_) => write!(f, "OP_REVERSE"),
            // Arithmetic
            Opcode::OP_RESERVED_4(_) => write!(f, "OP_RESERVED_4"),
            Opcode::OP_1ADD(_) => write!(f, "OP_1ADD"),
            Opcode::OP_1SUB(_) => write!(f, "OP_1SUB"),
            Opcode::OP_2MUL(_) => write!(f, "OP_2MUL"),
            Opcode::OP_2DIV(_) => write!(f, "OP_2DIV"),
            Opcode::OP_ADDMOD(_) => write!(f, "OP_ADDMOD"),
            Opcode::OP_MULMOD(_) => write!(f, "OP_MULMOD"),
            Opcode::OP_NOT(_) => write!(f, "OP_NOT"),
            Opcode::OP_0NOTEQUAL(_) => write!(f, "OP_0NOTEQUAL"),
            Opcode::OP_ADD(_) => write!(f, "OP_ADD"),
            Opcode::OP_SUB(_) => write!(f, "OP_SUB"),
            Opcode::OP_MUL(_) => write!(f, "OP_MUL"),
            Opcode::OP_DIV(_) => write!(f, "OP_DIV"),
            Opcode::OP_RESERVED_5(_) => write!(f, "OP_RESERVED_5"),
            Opcode::OP_LSHIFT(_) => write!(f, "OP_LSHIFT"),
            Opcode::OP_RSHIFT(_) => write!(f, "OP_RSHIFT"),
            Opcode::OP_BOOLAND(_) => write!(f, "OP_BOOLAND"),
            Opcode::OP_BOOLOR(_) => write!(f, "OP_BOOLOR"),
            Opcode::OP_NUMEQUAL(_) => write!(f, "OP_NUMEQUAL"),
            Opcode::OP_NUMEQUALVERIFY(_) => write!(f, "OP_NUMEQUALVERIFY"),
            Opcode::OP_NUMNOTEQUAL(_) => write!(f, "OP_NUMNOTEQUAL"),
            Opcode::OP_LESSTHAN(_) => write!(f, "OP_LESSTHAN"),
            Opcode::OP_GREATERTHAN(_) => write!(f, "OP_GREATERTHAN"),
            Opcode::OP_LESSTHANOREQUAL(_) => write!(f, "OP_LESSTHANOREQUAL"),
            Opcode::OP_GREATERTHANOREQUAL(_) => write!(f, "OP_GREATERTHANOREQUAL"),
            Opcode::OP_MIN(_) => write!(f, "OP_MIN"),
            Opcode::OP_MAX(_) => write!(f, "OP_MAX"),
            Opcode::OP_WITHIN(_) => write!(f, "OP_WITHIN"),
            // Digest
            Opcode::OP_RIPEMD160(_) => write!(f, "OP_RIPEMD160"),
            Opcode::OP_SHA1(_) => write!(f, "OP_SHA1"),
            Opcode::OP_SHA256(_) => write!(f, "OP_SHA256"),
            Opcode::OP_HASH160(_) => write!(f, "OP_HASH160"),
            Opcode::OP_HASH256(_) => write!(f, "OP_HASH256"),
            Opcode::OP_TAGGEDHASH(_) => write!(f, "OP_TAGGEDHASH"),
            Opcode::OP_BLAKE2BVAR(_) => write!(f, "OP_BLAKE2BVAR"),
            Opcode::OP_BLAKE2SVAR(_) => write!(f, "OP_BLAKE2SVAR"),
            // Secp
            Opcode::OP_SECPSCALARADD(_) => write!(f, "OP_SECPSCALARADD"),
            Opcode::OP_SECPSCALARMUL(_) => write!(f, "OP_SECPSCALARMUL"),
            Opcode::OP_SECPPOINTADD(_) => write!(f, "OP_SECPPOINTADD"),
            Opcode::OP_SECPPOINTMUL(_) => write!(f, "OP_SECPPOINTMUL"),
            Opcode::OP_PUSHSECPGENERATORPOINT(_) => write!(f, "OP_PUSHSECPGENERATORPOINT"),
            Opcode::OP_ISZEROSECPSCALAR(_) => write!(f, "OP_ISZEROSECPSCALAR"),
            Opcode::OP_ISINFINITESECPPOINT(_) => write!(f, "OP_ISINFINITESECPPOINT"),
            // Digital signatures
            Opcode::OP_CHECKSCHNORRSIG(_) => write!(f, "OP_CHECKSCHNORRSIG"),
            Opcode::OP_CHECKSCHNORRSIGBIP340(_) => write!(f, "OP_CHECKSCHNORRSIGBIP340"),
            Opcode::OP_CHECKBLSSIG(_) => write!(f, "OP_CHECKBLSSIG"),
            Opcode::OP_CHECKBLSSIGAGG(_) => write!(f, "OP_CHECKBLSSIGAGG"),
            // Call info
            Opcode::OP_CALLER(_) => write!(f, "OP_CALLER"),
            Opcode::OP_OPSBUDGET(_) => write!(f, "OP_OPSBUDGET"),
            Opcode::OP_OPSCOUNTER(_) => write!(f, "OP_OPSCOUNTER"),
            Opcode::OP_OPSPRICE(_) => write!(f, "OP_OPSPRICE"),
            Opcode::OP_TIMESTAMP(_) => write!(f, "OP_TIMESTAMP"),
            // Call
            Opcode::OP_CALL(_) => write!(f, "OP_CALL"),
            Opcode::OP_CALLEXT(_) => write!(f, "OP_CALLEXT"),
            // Payment
            Opcode::OP_PAYABLEALLOC(_) => write!(f, "OP_PAYABLEALLOC"),
            Opcode::OP_PAYABLESPENT(_) => write!(f, "OP_PAYABLESPENT"),
            Opcode::OP_PAYABLELEFT(_) => write!(f, "OP_PAYABLELEFT"),
            Opcode::OP_PAY(_) => write!(f, "OP_PAY"),
            // Memory
            Opcode::OP_MWRITE(_) => write!(f, "OP_MWRITE"),
            Opcode::OP_MREAD(_) => write!(f, "OP_MREAD"),
            Opcode::OP_MFREE(_) => write!(f, "OP_MFREE"),
            // Storage
            Opcode::OP_SWRITE(_) => write!(f, "OP_SWRITE"),
            Opcode::OP_SREAD(_) => write!(f, "OP_SREAD"),
        }
    }
}
